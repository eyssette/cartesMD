const defaultMD = `# Pr√©sentation de l'outil

_CartesMD_ est un outil **libre** et **gratuit** : vous pouvez √©diter le texte ci-dessous pour changer les cartes.
Vous pouvez ensuite les imprimer facilement : il suffira alors de les d√©couper, de plier et de coller le recto sur le verso.

Pour cr√©er ses cartes, il faut respecter la syntaxe ci-dessous :

<!-- Les cartes commencent ci-dessous, √† partir du premier titre de niveau 2, tout ce qui est √©crit avant ne compte pas (vous pouvez le supprimer) --> 

## Cartes MD
- ![](back.png)

CartesMD permet de cr√©er des cartes √† jouer en Markdown !

### Un outil libre & gratuit !

On peut √©crire son texte directement dans l'interface.

- Cr√©√© par [C√©dric Eyssette](https://eyssette.forge.apps.education.fr/)
- Sources sur [LaForge√âdu](https://forge.apps.education.fr/cartesmd/cartesMD.forge.apps.education.fr)
- Inspir√© par [Cr√©aCarte](https://lmdbt.forge.apps.education.fr/creacarte/) <br>de [Cyril Iaconelli](https://lmdbt.forge.apps.education.fr/)

<!-- On s√©pare chaque carte par trois tirets du milieu qui se suivent  --> 

---


## Th√®me <br>& image de fond
- ![bleu](back.png)

On peut choisir la couleur de la carte en l'indiquant dans le texte ‚Äú_alt_‚Äù de l'image de fond.

### Personnalisation possible !

On peut changer l'image de fond en mettant l'URL d'une autre image.

#### 1


---

## Le Markdown
- ![violet](back.png)

On peut utiliser **toute** la syntaxe _Markdown_.

### Pratique & efficace !

On peut notamment :
- ==surligner==, ++souligner++
- faire des listes ‚Ä¶

CartesMD calcule automatique-<br>ment la taille de la police pour rester dans le cadre.

---
## Balises HTML

On peut aussi utiliser du <span style="color: darkred;">HTML</span> si on veut un contr√¥le plus fin de l'affichage !

### Latex

Pour le $Latex$, on ajoute un en-t√™te _yaml_  au tout d√©but du document, avec :

\`\`\`
-‚Äã-‚Äã-
maths: true
-‚Äã-‚Äã-
\`\`\`

#### :mag:


---

## üñ®Ô∏è &nbsp;Imprimer
- ![vert](back.png)

On lance simplement l'impression de cette page pour imprimer les cartes

### Param√®tres d'impression

<span style="font-size:0.9em">Il faut penser √† activer l'impression des arri√®res-plan et √† d√©sactiver les en-t√™tes et pieds de page.</span>

---

## Emojis & pr√©cisions<aside> :+1:</aside>
- ![orange](back.png)

üß™  **Les emojis :**
On les copie-colle ou bien on met le code texte  :+1:

### Autres ajouts possibles<aside> :fire:</aside>

On peut ajouter des pr√©cisions dans les titres avec ‚Äú_aside_‚Äù.

On peut utiliser ou non le dernier titre, de niveau 4, pour mettre le num√©ro de carte, la classe, un emoji ‚Ä¶


#### :books:

---

## Platon <aside>428-348</aside>
- ![rouge](https://upload.wikimedia.org/wikipedia/commons/thumb/d/da/Plato_Pio-Clemetino_Inv305.jpg/395px-Plato_Pio-Clemetino_Inv305.jpg)

![object-position: 0 -20px](https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Danaides_Waterhouse_1903.jpg/423px-Danaides_Waterhouse_1903.jpg)


### Philosophie antique <aside>Ath√®nes</aside>

On peut ajouter une image dans le cadre du haut et la repositionner en CSS en utilisant le ‚Äú_alt_‚Äù de l'image.


#### Term.


---

## Utiliser CodiMD
- ![blue background: linear-gradient(white, lightblue);]()

<!-- On peut ne pas mettre d'image de fond -->

On peut aussi utiliser CodiMD pour conserver la source de ses cartes

### Gestion plus facile !

On pourra alors facilement conserver ses cartes, et les partager √† l'adresse suivante&nbsp;:
https://cartesmd.forge.apps.education.fr/#URL
(en rempla√ßant URL <br>par l'URL du fichier CodiMD)


---

## Usages plus avanc√©s
- ![violet background: linear-gradient(#EEE, darkviolet);]()

On peut aussi utiliser l'en-t√™te _YAML_ pour ajouter des styles en CSS

### Tout peut √™tre chang√© !

_card_ pour chaque carte ; _z1_ ‚Ä¶ _z4_ pour les zones d'√©criture ; _back_ pour le verso et _backImage_ pour l'image de fond ; _style_ pour tout le reste. <br>Par exemple :

\`\`\`
-‚Äã-‚Äã-
z1: height:300px
-‚Äã-‚Äã-
\`\`\`

`;

let md;

// Raccourcis vers des cartes particuli√®res
const shortcuts = [
	["shortcut","URL"]
];

function handleURL(url) {
	if (url !== "") {
		let addCorsProxy = true;
		// V√©rification de la pr√©sence d'un raccourci
		shortcut = shortcuts.find(element => element[0]==url);
		if (shortcut) {
			url = shortcut[1];
		}
		// Gestion des fichiers h√©berg√©s sur github
		if (url.startsWith("https://github.com")) {
			addCorsProxy = false;
			url = url.replace(
				"https://github.com",
				"https://raw.githubusercontent.com"
			);
			url = url.replace("/blob/", "/");
		}
		// Gestion des fichiers h√©berg√©s sur codiMD
		if (
			url.startsWith("https://codimd") &&
			url.indexOf("download") === -1
		) {
			addCorsProxy = false;
			url =
				url.replace("?edit", "").replace("?both", "").replace("?view", "").replace(/#$/,"") +
				"/download";
		}
		// Gestion des fichiers h√©berg√©s via Hedgedoc
		if (
			url.includes("hedgedoc") &&
			url.indexOf("download") === -1
		) {
			addCorsProxy = false;
			url =
				url
					.replace("?edit", "")
					.replace("?both", "")
					.replace("?view", "")
					.replace(/#$/, "") + "/download";
		}
		url = addCorsProxy ? corsProxy + url: url;
	}
	return url;
}



function getMarkdownContent() {
	// R√©cup√©ration du markdown externe
	const url = window.location.hash.substring(1); // R√©cup√®re l'URL du hashtag sans le #
	if (url !== "") {
		const urlMD = handleURL(url)
		// R√©cup√©ration du contenu du fichier
		window.getMDpromise = fetch(urlMD)
			.then((response) => response.text())
			.then((data) => {
				md = data;
			})
			.catch((error) => console.error(error));
	} else {
		md = defaultMD
	}
}

getMarkdownContent();